name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add droplet host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p 22 ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote directory exists
        run: ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "mkdir -p '${{ secrets.REMOTE_DIR }}' '${{ secrets.REMOTE_DIR }}/data'"

      - name: Rsync repo to droplet (preserve server data/)
        run: |
          rsync -az --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'data/' \
            ./  "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/"

      # Create a temp .env on the runner from the secret (NOT committed), then upload it
      - name: Prepare .env from ENV_FILE (runner only)
        run: |
          printf "%s" "${{ secrets.ENV_FILE }}" > .env.deploy

      - name: Upload .env to server
        run: |
          scp .env.deploy "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/.env"
          rm -f .env.deploy

      - name: Install deps & (re)start with PM2
        run: |
          ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" bash -lc 'cat >/tmp/deploy_app.sh << "SCRIPT"
          set -euo pipefail

          APP_DIR="${{ secrets.REMOTE_DIR }}"
          APP_NAME="${{ secrets.APP_NAME }}"
          APP_DIR="${APP_DIR%/}"

          # make PATH sane
          if [ -f ~/.profile ]; then . ~/.profile; fi
          if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
          if [ -f ~/.nvm/nvm.sh ]; then . ~/.nvm/nvm.sh; fi

          if [ -z "$APP_DIR" ] || [ ! -d "$APP_DIR" ]; then
            echo "❌ APP_DIR not set or missing: $APP_DIR" >&2; exit 2; fi
          if [ -z "$APP_NAME" ]; then APP_NAME="$(basename "$APP_DIR")"; fi
          if [ -z "$APP_NAME" ]; then echo "❌ APP_NAME empty"; exit 3; fi

          echo "APP_DIR=$APP_DIR"
          echo "APP_NAME=$APP_NAME"
          ls -la "$APP_DIR"

          if [ ! -f "$APP_DIR/.env" ]; then
            echo "❌ .env not found in $APP_DIR"; exit 4; fi

          cd "$APP_DIR"
          export NPM_CONFIG_FUND=false
          if [ ! -f package-lock.json ]; then npm install --package-lock-only; fi

          # npm ci (robust across npm versions; no pipes)
          npm ci --omit=dev 2>/dev/null || npm ci --only=production 2>/dev/null || npm ci

          # pm2: locate or install (no pipes)
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "pm2 not found; installing globally..."
            npm i -g pm2 >/dev/null 2>&1 || npm i -g pm2
          fi
          PM2_PATH="$(command -v pm2 || true)"
          if [ -z "$PM2_PATH" ]; then
            echo "❌ pm2 not found after install"; exit 5; fi
          echo "Using PM2 at: $PM2_PATH"

          # pm2 existence check WITHOUT pipelines
          TMP_PM2="/tmp/pm2_list.json"
          "$PM2_PATH" jlist >"$TMP_PM2" 2>/dev/null || echo "[]">$TMP_PM2
          if grep -q "\"name\":\"$APP_NAME\"" "$TMP_PM2"; then
            "$PM2_PATH" reload "$APP_NAME" --update-env
          else
            "$PM2_PATH" start index.js --name "$APP_NAME" --cwd "$APP_DIR"
          fi

          "$PM2_PATH" save
          SCRIPT
          # normalize heredoc to LF (removes stray CR that can split tokens)
          sed -i "s/\r$//" /tmp/deploy_app.sh
          bash /tmp/deploy_app.sh
          '