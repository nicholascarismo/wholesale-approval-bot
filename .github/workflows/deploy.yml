name: Deploy to VPS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add droplet host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H -p 22 ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote directory exists
        run: ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "mkdir -p '${{ secrets.REMOTE_DIR }}' '${{ secrets.REMOTE_DIR }}/data'"

      - name: Rsync repo to droplet (preserve server data/)
        run: |
          rsync -az --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'data/' \
            ./  "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/"

      # Create a temp .env on the runner from the secret (NOT committed), then upload it
      - name: Prepare .env from ENV_FILE (runner only)
        run: |
          printf "%s" "${{ secrets.ENV_FILE }}" > .env.deploy

      - name: Upload .env to server
        run: |
          scp .env.deploy "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:${{ secrets.REMOTE_DIR }}/.env"
          rm -f .env.deploy

      - name: Build deploy script on runner (LF only)
        run: |
          cat > /tmp/deploy_app.sh << 'SCRIPT'
          set -eu
          APP_DIR="${{ secrets.REMOTE_DIR }}"
          APP_NAME="${{ secrets.APP_NAME }}"
          APP_DIR="${APP_DIR%/}"

          # login-like PATH
          if [ -f "$HOME/.profile" ]; then . "$HOME/.profile"; fi
          if [ -f "$HOME/.bashrc" ]; then . "$HOME/.bashrc"; fi
          if [ -f "$HOME/.nvm/nvm.sh" ]; then . "$HOME/.nvm/nvm.sh"; fi

          # sanity
          if [ -z "$APP_DIR" ]; then echo "APP_DIR empty"; exit 2; fi
          if [ ! -d "$APP_DIR" ]; then echo "APP_DIR missing: $APP_DIR"; exit 2; fi
          if [ -z "$APP_NAME" ]; then APP_NAME="$(basename "$APP_DIR")"; fi
          if [ -z "$APP_NAME" ]; then echo "APP_NAME empty"; exit 3; fi

          echo "APP_DIR=$APP_DIR"
          echo "APP_NAME=$APP_NAME"
          ls -la "$APP_DIR"

          # .env must exist
          if [ ! -f "$APP_DIR/.env" ]; then echo ".env missing in $APP_DIR"; exit 4; fi

          cd "$APP_DIR"
          export NPM_CONFIG_FUND=false

          # ensure lockfile exists for reproducible installs (don’t fail if it doesn’t)
          if [ ! -f package-lock.json ]; then
            set +e
            npm install --package-lock-only
            set -e
          fi

          # Install: try ci, then production, then full
          set +e
          npm ci
          NPM_STATUS=$?
          if [ "$NPM_STATUS" -ne 0 ]; then
            npm install --production
            NPM_STATUS=$?
            if [ "$NPM_STATUS" -ne 0 ]; then
              npm install
              NPM_STATUS=$?
            fi
          fi
          set -e
          if [ "$NPM_STATUS" -ne 0 ]; then echo "npm install failed"; exit 6; fi

          # Ensure pm2 exists
          if ! command -v pm2 >/dev/null 2>&1; then
            npm i -g pm2
          fi
          PM2_PATH="$(command -v pm2 || echo "")"
          if [ -z "$PM2_PATH" ]; then echo "pm2 not found after install"; exit 5; fi
          echo "Using PM2 at: $PM2_PATH"

          # Detect if a process with this name already exists
          set +e
          "$PM2_PATH" describe "$APP_NAME" >/dev/null 2>&1
          EXISTS_STATUS=$?
          set -e

          # Universal entrypoint: use npm start (every repo you pasted has it)
          if [ "$EXISTS_STATUS" -eq 0 ]; then
            # try reload, tolerate busy state by retry then restart
            ATTEMPTS=0
            RC=1
            while [ "$ATTEMPTS" -lt 3 ] && [ "$RC" -ne 0 ]; do
              "$PM2_PATH" reload "$APP_NAME" --update-env
              RC=$?
              if [ "$RC" -ne 0 ]; then sleep 5; fi
              ATTEMPTS=$((ATTEMPTS+1))
            done
            if [ "$RC" -ne 0 ]; then
              "$PM2_PATH" restart "$APP_NAME"
            fi
          else
            # pm2 running npm start
            "$PM2_PATH" start npm --name "$APP_NAME" -- start
            # ensure working directory is correct
            "$PM2_PATH" set "$APP_NAME" cwd "$APP_DIR" >/dev/null 2>&1 || true
          fi

          "$PM2_PATH" save
          SCRIPT
          # ensure LF and executable
          sed -i 's/\r$//' /tmp/deploy_app.sh
          chmod +x /tmp/deploy_app.sh

      - name: Upload & run deploy script on server (strip CR just in case)
        run: |
          scp /tmp/deploy_app.sh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}:/tmp/deploy_app.sh"
          ssh "${{ secrets.DROPLET_USER }}@${{ secrets.DROPLET_HOST }}" "tr -d '\r' < /tmp/deploy_app.sh > /tmp/deploy_app.lf.sh && bash /tmp/deploy_app.lf.sh"